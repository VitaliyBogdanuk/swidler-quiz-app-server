swagger: "2.0"
info:
  title: BRO API's documentation
  version: 1.0.0
tags:
  - name: Achievements
    description: Operations related to Achievements
  - name: Users
    description: Operations related to Users
  - name: Answers
    description: Operations related to Answers
  - name: Categories
    description: Operations related to Categories
  - name: Situations
    description: Operations related to Situations
  - name: Topics
    description: Operations related to Topics
  - name: Auth
    description: Operations related to authentication
  - name: Quiz
    description: Operations related to quiz
paths:
  /api/achievements:
    get:
      tags:
        - Achievements
      summary: Get all achievements
      responses:
        '200':
          description: A list of achievements
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    image:
                      type: string
                    scoreRequired:
                      type: integer
        '500':
          description: Server error

  /api/achievement/{id}:  
    get:
      tags:
        - Achievements
      summary: Get a single achievement by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single achievement
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  image:
                    type: string
                  scoreRequired:
                    type: integer
        '404':
          description: Achievement not found
        '500':
          description: Server error

  /api/answers:
    get:
      tags:
        - Answers
      summary: Retrieve all answers
      responses:
        200:
          description: List of all answers
        500:
          description: Server error

  /api/answer/{id}:
    get:
      tags:
        - Answers
      summary: Retrieve a single answer by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the answer to retrieve
          schema:
            type: integer
      responses:
        200:
          description: Returns the answer with the specified ID
        404:
          description: Answer not found
        500:
          description: Server error

  /api/categories:
    get:
      tags:
        - Categories
      summary: Retrieve all categories
      responses:
        200:
          description: List of all categories include array of Topics for each Category
        500:
          description: Server error

  /api/category/{id}:
    get:
      tags:
        - Categories
      summary: Retrieve a single category by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the category to retrieve
          schema:
            type: integer
      responses:
        200:
          description: Returns the category with the specified ID include array of Topics
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  image:
                      type: string
        404:
          description: Category not found
        500:
          description: Server error

  /api/quiz/situations:
    get:
      tags:
        - Quiz
      summary: Retrieve all situations
      responses:
        200:
          description: List of all situations

  /api/quiz/situations/{id}/answers:
    get:
      tags:
        - Quiz
      summary: Retrieve answers for a specific situation by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the situation to retrieve answers for
          schema:
            type: integer
      responses:
        200:
          description: Returns the answers for the specified situation
        404:
          description: Answers not found for this situation

  /api/quiz/achievements/{userId}:
    get:
      tags:
        - Quiz
      summary: Retrieve achievements for a specific user by ID
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to retrieve achievements for
          schema:
            type: integer
      responses:
        200:
          description: Returns the achievements for the specified user
        404:
          description: User not found

  /api/topics:
    get:
      tags:
        - Topics
      summary: Retrieve all topics
      responses:
        200:
          description: List of all topics include array of Situations for each Topic
        500:
          description: Server error

  /api/topic/{id}:
    get:
      tags:
        - Topics
      summary: Retrieve a single topic by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the topic to retrieve
          schema:
            type: integer
      responses:
        200:
          description: Returns the topic with the specified ID include array of Situations
        404:
          description: Topic not found
        500:
          description: Server error

  /api/situations:
    get:
      tags:
        - Situations
      summary: Retrieve all situations
      produces:
        - application/json
      responses:
        200:
          description: List of all situations
        500:
          description: Server error

  /api/situation/{id}:
    get:
      tags:
        - Situations
      summary: Retrieve a single situation by ID
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the situation to retrieve
      responses:
        200:
          description: Returns the situation with the specified ID
        404:
          description: Situation not found
        500:
          description: Server error

  /api/users:
    get:
      tags:
        - Users
      summary: Retrieve all users
      responses:
        200:
          description: List of all users
        500:
          description: Server error

  /api/user/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a single user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        200:
          description: Returns the user with the specified ID
        404:
          description: User not found
        500:
          description: Server error

  /api/user/updateTopics:
    post:
      tags:
        - Users
      summary: Update user's topics
      parameters:
        - in: body
          name: updateUserTopics
          description: Allows the addition of new topics to a user's profile.
          schema:
            type: object
            properties:
              userId:
                type: integer
              topicId:
                type: integer
      responses:
        '200':
          description: Topics updated successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/user/updateScore:
    post:
      tags:
        - Users
      summary: Update a user's score
      parameters:
        - in: body
          name: updateScore
          description: Updates the score of a specific user based on the provided user ID and score increment.
          schema:
            type: object
            properties:
              id:
                type: integer
              score:
                type: integer
      responses:
        '200':
          description: User score updated successfully
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/user/countCorrectAnswer/{id}:
    put:
      tags:
        - Users
      summary: Increment user's correct answer count
      description: Increments the count of correct answers for a specific user by one.
      operationId: updateUserCorrectAnswer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user
      responses:
        '200':
          description: User's count of correct answers incremented
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/user/countWrongAnswer/{id}:
    put:
      tags:
        - Users
      summary: Increment user's wrong answer count
      description: Increments the count of wrong answers for a specific user by one.
      operationId: updateUserWrongAnswer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user
      responses:
        '200':
          description: User's count of wrong answers incremented
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/cheaterPhone/{phone}:
    get:
      tags:
        - Cheaters
      summary: Increment user's wrong answer count
      description: Return Cheater object with descriptions
      operationId: Return Cheater object
      parameters:
        - name: phone
          in: path
          required: true
          schema:
            type: integer
          description: The Cheater phone
      responses:
        '200':
          description: Cheater phone object
        '404':
          description: Cheater not found
        '500':
          description: Internal server error

  /api/cheaterPhones:
    get:
      tags:
        - Cheaters
      summary: Retrieve all Cheaters
      description: Return all Cheaters object with descriptions
      operationId: Return all Cheaters object
      responses:
        '200':
          description: Retrieve all Cheaters
        '404':
          description: Cheaters not found
        '500':
          description: Internal server error

  /api/cheaterPhone:
    post:
      tags:
        - Cheaters
      summary: Create Cheater phone and description
      parameters:
        - in: body
          name: cheaterPhone
          description: Create cheater phone and description
          schema:
            type: object
            properties:
              userId:
                type: integer
              phone:
                type: string
              description:
                type: string
      responses:
        '200':
          description: Cheater added succesfully
        '404':
          description: Cheater not found
        '500':
          description: Internal server error
